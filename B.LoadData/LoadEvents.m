function run = LoadEvents(run, ID, annot_dir, data_dir, varargin)
% This function loads the events of each run and stores them into
% run.events
%
% Use as
%   [run]      = LoadEvents(run, ID, annot_dir, data_dir, varargin)
%
% INPUT:
%       run    = structure of all the runs generated by
%       LoadData.m
%       ID         = participant ID (e.g. '110001'); 
%       annot_dir  = directory in which the annotation files are stored
%       data_dir   = directory in which the data is stored (for the
%       TextGrid files)
% Additional options can be specified in key-value pairs and can be:
%       'vis'        =  1 or 0 for visualizing the FOG events of each
%       run (default = 1)
%       'print'      = 1 or 0 for printing the events of each run on
%       the command window (default = 0)
%       'print_notes' = 1 or 0 for printing the notes of each run in
%       the command window (default = 1)
%
% OUTPUT
%       run.events     = structure all the FOG events collected for
%       each run 
%               events.type = 'FOG_Trigger'; 'FOG_Type'; 'Gait_task';
%               'Gait_events'; ('Gait_events_extra'); (NOTES);
%               events.sample = onset of event in samples relative to the first sample
%               of the run (@512 Hz)
%               events.timestamp = onset of event expressed in seconds,
%               corresponding to the field run(i).data.time
%               events.duration = duration of the event expressed in
%               samples
%               events.end_time = end time of the event expressed in
%               seconds, corresponding to the field run(i).data.time
%               (not fieldtrip official)
%
% DEPENDENIES
%       
%

%% Get the options
vis= ft_getopt(varargin, 'vis', 1);
print= ft_getopt(varargin, 'print', 0);
print_notes=ft_getopt(varargin, 'print_notes', 1);

%% Parameters
fsample=run(1).data_ECG.fsample;

%% load annotations for this patient
% load gait_events + gait_tasks
if any(strcmp(ID, {'110001', '110002', '110003', '110004', '110005', '110006', '110007', '110008'}))
  opts=detectImportOptions(fullfile(annot_dir, 'Marije', 'Annotations_Marije_PD1-8_02072020.tsv'), 'FileType', 'text');
  opts.SelectedVariableNames={'Var1', 'Var3', 'Var5', 'Var7', 'Var8', 'Var9'};
  gait_events=readtable(fullfile(annot_dir, 'Marije', 'Annotations_Marije_PD1-8_02072020.tsv'), opts);
  gait_events.Properties.VariableNames={'type', 'timestamp', 'end_time', 'duration', 'value', 'file'};
  % Marije forgot a '0' in the filenames --> fix
  for i=1:height(gait_events)
    tmp_str=strsplit(char(gait_events.file(i)), '0');
    gait_events.file(i)={[char(tmp_str{1}) '000' char(tmp_str{2})]};
  end
  gait_events=gait_events(startsWith(gait_events.file, sprintf('PD_%s', ID)), :); % only for this patient
elseif any(strcmp(ID, {'110009', '110010', '110011', '110012', '110013', '110014', '110015', '110016'}))
  opts=detectImportOptions(fullfile(annot_dir, 'Emma', 'Annotations_Emma_PD9-16_02072020.tsv'), 'FileType', 'text');
  opts.SelectedVariableNames={'Var1', 'Var3', 'Var5', 'Var7', 'Var8', 'Var9'};
  gait_events=readtable(fullfile(annot_dir, 'Emma', 'Annotations_Emma_PD9-16_02072020.tsv'), opts);
  gait_events.Properties.VariableNames={'type', 'timestamp', 'end_time', 'duration', 'value', 'file'};
  gait_events=gait_events(startsWith(gait_events.file, sprintf('PD_%s', ID)), :); % only for this patient
end

% load FOG_events
FOG_table=readtable(fullfile(annot_dir, 'agreed', sprintf('Annotations_agreed_PD-%s.xlsx', ID)));
% select FOGs with agreement or consensus
FOG_table=FOG_table(find(FOG_table.agreement==1 | FOG_table.consensus==1),:);
% split FOG_events for trigger and type
FOG_table=stack(FOG_table,{'FOG_Trigger', 'FOG_Type'}, 'NewDataVariableName', 'value', 'IndexVariableName', 'type');
FOG_table.type=cellstr(FOG_table.type);
% select only relevant parts of the variables
FOG_events=FOG_table(:,[17 18 1 2 9]);
FOG_events.Properties.VariableNames{3}='timestamp';
FOG_events.duration=FOG_events.end_time-FOG_events.timestamp;

 

%% Loop over the runs and collect events
fprintf('........loading events........ \n')
% exceptions 

if strcmp(ID, '110002') & length(run)==5
  warning('4 annotation runs and 5 data runs are found for this subject. Removing data run 4')
  run=run([1:3 5]);
end
% internal checks
run_names=unique(gait_events.file);
% exceptions
if strcmp(ID, '110001')
  warning('run 5 and 6 are empty for heartrate data, skipping events of this runs')
  run=run([1:4]);
  run_names={'PD_110001_Training-1.eaf', 'PD_110001_Official-1.eaf', 'PD_110001_Official-2.eaf', 'PD_110001_Official-3.eaf'};
  gait_events=gait_events(match_str(gait_events.file, run_names),:);
  FOG_events=FOG_events(match_str(FOG_events.file, run_names),:);
end
if length(run)~=length(run_names)
    error('not the same amount of runs for data files and gait_event annotation files: %d data runs and %d gait_event annotation runs', length(run), length(run_names))
end

training_names=run_names(contains(run_names, 'Training')); % names of training runs
n_training=length(training_names); % number of training runs
official_names=run_names(contains(run_names, 'Official')); % names of official runs
n_official=length(official_names); % number of official runs
k=1;
for i=1:length(run) 
  % name of the run
  if k<=n_training
    orig_name=training_names{k};
    tmp_str=strsplit(char(orig_name), {'_', '-', '.'});
    name_run=[tmp_str{3} '_Trial_' tmp_str{4}];
    k=k+1;
  else
    orig_name=official_names{i-k+1};
    tmp_str=strsplit(char(orig_name), {'_','-', '.'});
    name_run=[tmp_str{3} '_Session_' tmp_str{4}];
  end  
  
  % select corresponding textGrid file
  textgrid=dir(fullfile(data_dir, ID, 'Videos', 'Camera1', sprintf('%s.TextGrid', name_run)));
  % read in the textGrid file
  fileID=fopen(fullfile(textgrid.folder, textgrid.name));
  t=textscan(fileID, '%s %s %f', 'HeaderLines', 15);
  fclose(fileID);
  offset=t{3}(2); % the offset of the video is the start of the first beep (in seconds)
  if isnan(offset)
    warning('the offset of the video could not be determined properly from the Textgrid file')
  end
  
  % compare with the annotator-specific offset (corresponds to the timestamp of the Gait_task 'Rest')
  % and correct timestamps for differences between those offsets for the
  % gait_events. 
  offset_gaitevents=gait_events.timestamp(find(strcmp('Rest', gait_events.value)&strcmp(orig_name, gait_events.file)));
  corr_gaitevents= offset_gaitevents-offset;
  % internal checks
  if isempty(offset_gaitevents)
    error('The annotator specific offset for %s could not be determined since there was no Gait_task Rest. Please check this before preceding.', orig_name)
  end
  if corr_gaitevents>1 
    error('The offsets of the annotators and the offsets from the TextGrid-file in %s differed more than 1 sec. Please check what the problem is (camera 1 = master?, correct beep was detected with TextGrid?)', orig_name)
  end
  
  % correction for gait_events so onset is relative to the start of the video (FOG_events are already corrected in
  % compareFOG_main.m) --> not needed, because when exporting, the master media
  % time offset is already added
%   gait_events.timestamp=gait_events.timestamp-corr_gaitevents;
%   gait_events.end_time=gait_events.end_time-corr_gaitevents;

  % collect the events of this run 
  run_gait_events=gait_events(strcmp(gait_events.file, orig_name),:);
  run_FOG_events=FOG_events(strcmp(FOG_events.file, orig_name),:);  
  run_events=[run_gait_events; run_FOG_events];

  % align time axes with the data
  % (the first beep in the data is on time = 0)
  start_sample=find(run(i).data_ECG.time{1}==0); % sample number where t=0
  run_events.timestamp=run_events.timestamp-offset;
  run_events.end_time=run_events.end_time-offset;
  run_events.sample=start_sample + round([run_events.timestamp]*fsample);
  run_events.duration=round([run_events.duration]*fsample); % convert from time to samples
  % remove empty spaces
  idx=find(endsWith(run_events.value, ' '));
  for x=1:length(idx)
    tmp=strsplit(char(run_events.value(idx(x))), ' ');
    run_events.value(idx(x))={tmp{1}};
  end
  idx=find(contains(run_events.value, ' ') & ~strcmp('NOTES', run_events.type));
  if ~isempty(idx)
    warning('some events contain empty spaces. Please check whether this is correct.')
    display(run_events(idx,:))
  end
  
  % remove gait_task of the run_events (gait_tasks are moved by importing and
  % exporting annotation files)
  run_events=run_events(find(~strcmp(run_events.type, 'Gait_task')),:);
  % collect the gait_task & AAS task of this run and add to the
  % run_events
  [run_gaittask, run_AAS]=load_gaittask(ID, i, orig_name, length(run), fsample, data_dir);
  % add sample
  run_gaittask.sample=start_sample + round([run_gaittask.timestamp]*fsample);
  run_AAS.sample=start_sample + round([run_AAS.timestamp]*fsample);
  
 % find the stop commands which are the closest stop_walking events to the
  % end of the gait_task and store them under AAS_task
  stps=run_events(find(strcmp(run_events.value, 'stop_walking')),:);
  clear stop; counter=1;
  for g=2:height(run_gaittask)
    idx=find(run_gaittask.end_time(g)-[stps.timestamp]>0);
    [~, ix]=min(run_gaittask.end_time(g)-[stps.timestamp(idx)]);
    if isempty(ix)
      warning('could not find the stop command of this gait task. Excluding from the event list')
      continue
    end
    stop(counter).type='AAS_task';
    stop(counter).value='stop_command';
    stop(counter).timestamp=stps.timestamp(idx(ix));
    stop(counter).end_time=stop(counter).timestamp;
    stop(counter).duration=0;
    stop(counter).file=stps.file(idx(ix));
    stop(counter).sample=stps.sample(idx(ix));
    counter=counter+1;
  end
  AAS_stop=struct2table(stop);
  % add to run_AAS
  run_AAS=[run_AAS; AAS_stop];
  
  % start_walking and stop_walking are point events --> change timestamp,
  % end_time, and duration (see definition_gait_events.docx)
  strt_stps=find(strcmp(run_events.value, 'start_walking') | strcmp(run_events.value, 'stop_walking'));
  run_events.timestamp(strt_stps)=run_events.end_time(strt_stps);
  run_events.duration(strt_stps)=0;
  
  % combine all kind of events into run_events
  run_events=[run_events; run_gaittask; run_AAS];
  
  % print if asked for
  if print
    display(run_events)
  end
  if print_notes
    idx=find(strcmp('NOTES', run_events.type) | strcmp('Unexpected_movements' , run_events.type));
    display(run_events(idx, :))
  end
  
  % table 2 struct
  run_events=table2struct(run_events);
  run_events=rmfield(run_events, {'file'});
 
  % save all events for that run and add run info
  run(i).events=run_events;
  run(i).info.ID=ID; 
  run(i).info.runname=name_run;
end


%% visualize 
if vis
    figure; title(sprintf('FOG events for subject %s', ID));  xlabel('time(s)'); ylabel('run nr'); ylim([0 (length(run)+1)]); hold on;
    for i =1:length(run)
        % plot gait_tasks
        task_on=nan(6,1);
        task_off=nan(6,1);
        task_on(1)=run(i).events(find(strcmp('Rest', {run(i).events.value}))).timestamp;
        task_off(1)=run(i).events(find(strcmp('Rest', {run(i).events.value}))).end_time;
        task_on(2)=run(i).events(find(strcmp({run(i).events.value}, '360spin_rapid'))).timestamp;
        task_off(2)=run(i).events(find(strcmp({run(i).events.value}, '360spin_rapid'))).end_time;
        task_on(3)=run(i).events(find(strcmp({run(i).events.value}, '360spin_rapid_Dualcog'))).timestamp;
        task_off(3)=run(i).events(find(strcmp({run(i).events.value}, '360spin_rapid_Dualcog'))).end_time;
        task_on(4)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course'))).timestamp;
        task_off(4)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course'))).end_time;
        if any(strcmp(ID, {'110001', '110002'}))
          task_on(5)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_rapid_Dualcog'))).timestamp;
          task_off(5)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_rapid_Dualcog'))).end_time;
          task_on(6)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualmotorcog'))).timestamp;
          task_off(6)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualmotorcog'))).end_time;
        else
          task_on(5)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualcog'))).timestamp;
          task_off(5)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualcog'))).end_time;
          task_on(6)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualmotor'))).timestamp;
          task_off(6)=run(i).events(find(strcmp({run(i).events.value}, 'FOG_course_Dualmotor'))).end_time;
        end
        a=plot([task_on task_off], ones(1,2)*i, 'linewidth', 2);
        if i==1
          colors=[a.Color];
        else
          for k=1:length(a)
            a(k).Color=colors(k*3-2:k*3);
          end
        end
     
        % plot FOG's
        FOG_events=run(i).events(find(strcmp('FOG_Trigger', {run(i).events.type})));
        turn={'FOG_180_L', 'FOG_180_R', 'FOG_360_L', 'FOG_360_R'};
        start='FOG_SH';
        door='FOG_Doorway';
        other={'FOG', 'FOG_Target', 'FOG_Dual'};
        if isempty(FOG_events)
            continue
        end
        % plot all FOGs during turns
        if any(ismember({FOG_events.value}, turn))
            FOG_turn=FOG_events(find(ismember({FOG_events.value}, turn)));
            FOG_turn_on=[FOG_turn.timestamp];
            FOG_turn_off=[FOG_turn.end_time];
            b=line([FOG_turn_on; FOG_turn_off], ones(2, length(FOG_turn))*(i+0.25), 'Color', 'b', 'LineWidth', 4, 'DisplayName', 'FOG turn');
        end
        % plot start hesitation FOGs 
        if any(ismember({FOG_events.value}, start))
            FOG_start=FOG_events(find(ismember({FOG_events.value}, start)));
            FOG_start_on=[FOG_start.timestamp];
            FOG_start_off=[FOG_start.end_time];
            c=line([FOG_start_on; FOG_start_off], ones(2, length(FOG_start))*(i+0.25), 'Color', 'r', 'LineWidth', 4, 'DisplayName', 'FOG starting hesitation');
        end
        % plot doorway FOGs 
        if any(ismember({FOG_events.value}, door))
            FOG_door=FOG_events(find(ismember({FOG_events.value}, door)));
            FOG_door_on=[FOG_door.timestamp];
            FOG_door_off=[FOG_door.end_time];
            d=plot([FOG_door_on; FOG_door_off], ones(2, length(FOG_door))*(i+0.25), 'Color', 'g', 'LineWidth', 4, 'DisplayName', 'FOG doorway');
        end
        % plot other FOGs
        if any(ismember({FOG_events.value}, other))
            FOG_other=FOG_events(find(ismember({FOG_events.value}, other)));
            FOG_other_on=[FOG_other.timestamp];
            FOG_other_off=[FOG_other.end_time];
            e=plot([FOG_other_on; FOG_other_off], ones(2, length(FOG_other))*(i+0.25), 'Color', 'm', 'LineWidth', 4, 'DisplayName', 'FOG others');
        end
    end
    % add legend
    a(1).DisplayName='Rest'; a(2).DisplayName='360 spin'; a(3).DisplayName='360 spin + DT'; a(4).DisplayName='FOG course'; 
    if any(strcmp(ID, {'110001', '110002'}))  
    a(5).DisplayName='FOG course + DT';
    a(6).DisplayName='FOG course + DT + MT';
    else
      a(5).DisplayName='FOG course + DT';
      a(6).DisplayName='FOG course + MT';
    end    
    lgd=a;
    if exist('b')
        lgd=[lgd; b(1)];
    end
    if exist('c')
        lgd=[lgd; c(1)];
    end
    if exist('d')
        lgd=[lgd; d(1)];
    end
    if exist('e')
        lgd=[lgd; e(1)];
    end
    legend(lgd, 'Location', 'EastOutside')
    if ~exist('F:\Brainwave_exp2\figures\FOG_events\')
      mkdir('F:\Brainwave_exp2\figures\FOG_events\');
    end
    saveas(gcf, fullfile('F:\Brainwave_exp2\figures\FOG_events\', sprintf('%s.jpg', ID)));

end
